#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
//struct S
//{
//	int n;
//	int arr[];//柔性数组成员，也可以写成int arr[0]
//};
//int main()//柔性数组的创建方式之一,此时结构体类柔性数组是没有大小的，所以必须包含除柔性数组外，其他的元素
//{
//	struct S* ps = (struct S*)malloc(sizeof(struct S) + 5 * sizeof(int));
//	if (ps == NULL)
//	{
//		printf("%s\n", strerror(errno));
//	}
//	else
//	{
//		ps->n = 100;
//		int i = 0;
//		for (i = 0;i < 5;i++)
//		{
//			ps->arr[i] = i;
//		}
//	}
//	struct S* ptr = realloc(ps, 10 * sizeof(int));
//	if (ptr != NULL)
//	{
//		ps = ptr;
//		ptr->n = 1000;//ps和ptr所指向的地址相同
//	}
//	free(ps);
//	ps = NULL;
//	return 0;
//}
//用指针方式实现柔性数组
struct S
{
	int n;
	int* arr;//注意这里创建的是int*，是一个指针，通过指针找到数组，否则ps->arr表示的就不是一个指针
};           //柔性数组是开辟在结构体之外的，通过结构体里的指针导向柔性数组的
int main()
{
	struct S* ps = (struct S*)malloc(sizeof(struct S));//开辟了一个结构体大小（里面包含了一个整形大小和一个指针大小）
	if (ps != NULL)
	{
		ps->arr = (int*)malloc(5 * sizeof(int));//ps->arr相当与指针，指向结构体柔性数组。然后开辟任意大小的数组空间
	}
	if (ps->arr != NULL)
	{
		int i = 0;
		for (i = 0;i < 5;i++)
		{
			ps->arr[i] = i;
		
		}
		for (i = 0;i < 5;i++)
		{
			printf("%d ", ps->arr[i]);
		}
	}
	int* ptr = realloc(ps->arr, 10 * sizeof(int));
	if (ptr != NULL)
	{
		ps->arr = ptr;
		int i = 0;
		for (i = 5;i < 10;i++)
		{
			ps->arr[i] = i;
		}
		for (i = 5;i < 10;i++)
		{
			printf("%d ",ps->arr[i]);
		}
	}
	free(ps->arr);
	ps->arr = NULL;//这里相当与两个指针，ps和ps->arr，这两个指针都要free，且顺序是从小到大依次free
	free(ps);
	ps = NULL;
	return 0;
}
//两种柔性数组实现的方式//第一种要好一些
//一，是第二种要使用两次malloc，同时两次使用free，还有顺序要求，容易出错（方便内存释放）
//二，是多次使用malloc函数，开辟出的内存空间并不是连续的，容易导致内存碎片，导致空间利用率下降，和访问效率的下降
      //而第一种方法只用一次malloc，则避免了这个问题（有利于访问速度）